<tc:tc-config xmlns:tc="http://www.terracotta.org/config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd">

  <application>
    <dso>  
      <locks>
         <!-- Demonstrates the use of write locking for a synchronized method
 
              An autolock will apply the locking specified to any instance of
              synchronized.  This method is synchronized, so the autolocking
              will occur at the method level.  -->
        <autolock>
           <method-expression>void test.terracota.demo.locking.Main.method1()</method-expression>
           <!-- note that write is the default level, so strictly speaking, it's not
                required to specify the lock-level for a write, but it's good practice
                anyway -->
           <lock-level>write</lock-level>
        </autolock>

        <!--  Demonstrates the use of write locking for a method with
              synchronized block(s).
     
              There are two synchronized blocks in this method, so the autolock
              will apply to bloth blocks. -->
        <autolock>
           <method-expression>void test.terracota.demo.locking.Main.method2()</method-expression>
           <lock-level>write</lock-level>
        </autolock>

        <!-- Demonstrates the use of a concurrent lock.  A concurrent lock
             behaves the same as any other autolock.  In the case of a write lock,
             the write lock is acquired exclusively, guaranteeing that successive
             acquires will behave serially (e.g. one writer at a time).
     
             A concurrent lock will allow multiple writers to acquire the lock.
             The last writer, in the case of a collision, will win. -->
        <autolock>
           <method-expression>void test.terracota.demo.locking.Main.method3()</method-expression>
           <lock-level>concurrent</lock-level>
        </autolock>

        <!-- Demonstrates the use of the auto-synchronized feature.  This method
             has no synchronized, but is performing a write to a shared instance.
     
             It is possible to "force" synchronization at the method level, using
             the auto-synchronized feature - the auto-synchronized will add
             synchronization and then behave as a normal auto-lock would behave. -->
        <autolock auto-synchronized="true">
           <method-expression>void test.terracota.demo.locking.Main.method4()</method-expression>
           <lock-level>write</lock-level>
        </autolock>

        <!-- Demonstrates a read with an auto-synchronized lock.  As in the write
             case, the method is converted to the equivalent of a synchronized method,
             and then auto-locked.  -->
        <autolock auto-synchronized="true">
           <method-expression>void test.terracota.demo.locking.Main.method6()</method-expression>
           <lock-level>read</lock-level>
        </autolock>

        <!-- Demonstrates the use of a read lock on a synchronized method.  A read
             lock is not mutually exclusive, meaning many readers may access the data
             structure at the same time.
     
             This feature is highly useful for concurrent access to the same data.  Note
             a program attempting to write to shared instances will not be allowed to write
             resuling in an UnlockedSharedObjectError being thrown.  -->
        <autolock>
           <method-expression>void test.terracota.demo.locking.Main.method7()</method-expression>
           <lock-level>read</lock-level>
        </autolock>

        <!-- Demonstrates the use of auto-locking with synchronized blocks in the method.
     
             The behavior here is the same as a read lock at the method level. -->
        <autolock>
           <method-expression>void test.terracota.demo.locking.Main.method8()</method-expression>
           <lock-level>read</lock-level>
        </autolock>
      </locks>
      <instrumented-classes>
        <include>
          <class-expression>test.terracota.demo.locking.Main</class-expression>
        </include>
      </instrumented-classes>
      <roots>
        <root>
          <field-name>test.terracota.demo.locking.Main.instance</field-name>
        </root>
      </roots>
    </dso>
  </application>
</tc:tc-config>
