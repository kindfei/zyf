<howto>
h1.  ReentrantReadWriteLock Example

h2.  Summary

The [ReentrantReadWriteLock|http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html] in Java 1.5 allows for read and write locks to be specified using standard Java.  It also allows developers to separate lock acquisition and release from the call stack.

Terracotta natively supports ReentrantReadWriteLock, honoring read and write lock semantics (non-eclusive access vs. eclusive access).  

This example demonstrates how to use a ReentrantReadWriteLock in Terracotta.  It sets up a simple counter that is protected by a read lock and write lock.  A "read" loop starts 2 threads per VM that attempt to read the counter inside of a loop with a delay of 1 second.  A "write" loop starts 1 thread in the VM (the main thread) and writes updates to the counter inside of a loop with a delay of 3 seconds.

What to notice here is that more than one thread inside the VM attain the read lock simultaneously, and with 3 nodes total, 2 readers started, you will also see 2 VMs in the read loop simultaneously acquire the read lock (in other words the read lock is acquired simultaneously inter-VM and intra-VM - all 4 reader threads - simultaneously).  The write thread intersperses its writes inside the lock acquires.

h2.  How to run

*Node 1:*
{code}
$ javac *.java
$ start-tc-server &amp;
$ dso-java Main
counter is 0
counter is 0
counter is 0
counter is 0
counter is 1
counter is 1
counter is 1
counter is 1
counter is 1
counter is 1
counter is 2
counter is 2
counter is 2
counter is 2
counter is 2
counter is 2
counter is 3
counter is 3
(...)
{code}

*Node 2:*
{code}
$ dso-java Main 
counter is 0
counter is 0
counter is 0
counter is 0
counter is 1
counter is 1
counter is 1
counter is 1
counter is 1
counter is 1
counter is 2
counter is 2
counter is 2
counter is 2
counter is 2
counter is 2
counter is 3
counter is 3
{code}

*Node 3:*
{code}
$ dso-java Main count
Incrementing counter.  Counter is 1
Incrementing counter.  Counter is 2
Incrementing counter.  Counter is 3
{code}
</howto>
