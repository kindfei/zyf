
1. Load-Balance总体结构设计。系统整体的Master-Worker设计（Terracotta：任务队列，分布式缓存）。
	1.1 Load-BaLance
		通过分布式的任务分发（Master-Worker）实现，现有服务分为俩部分：Master负责接收消息，将消息分为一个或多个任务，
		并将这些任务放入一个任务队列，此队列通过TC同步在各个服务之间。Worker负责处理任务，从任务队列中取出任务，并执
		行。也就是说，一个服务本身既是Master也是Worker，运行多个服务即运行了多个Master和Worker，Master通过JMS的Queue
		消息达到了LB的效果，Worker又通过任务队列达到了LB。由于服务间的差异，Master在某些场合并没有实际作用。Master的
		作用取决于消息于任务的对应关系，如果一条消息对应一个任务，那么JMS的Queue的分发机制便能直接实现Worker的LB。此
		处可能会在LB的总体设计中考虑两种模式，一种是Master需要将一条消息处理成多条任务，再通过TC分发任务给Worker，第
		二种是Master并没有实际任务，所以当其接收到消息便直接交给Worker处理，这样减少了一次TC的分发。
	1.2 High-Availability
		HA主要依赖于通信层的实现（JMS），也就是Master通过接收Queue消息。这涉及到Topic的改造问题。另外在考虑一种单纯的
		HA结构，即没有LB。
	1.3 Master-Worker
		主要为了分布式计算即LB。
	1.4 Distributed-Caching
		在集群的结构中为了完成某些特殊处理（如最优汇率等）可能需要分布式缓存的功能。


2. Trader的Master-Worker设计。
3. Hibernate的Session管理，丰富现有接口，为特殊情况提供不自动关闭的Session。
4. 新通信层（ActiveMQ）与High-Availability的实现设计（协助潘新洋）。
