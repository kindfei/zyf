<?xml version="1.0" encoding="UTF-8"?>

<configuration>
	<to-string>
		<java-doc><![CDATA[
/**
 * Constructs a <code>String</code> with all attributes
 * in name = value format.
 *
 * @return a <code>String</code> representation 
 * of this object.
 */
		]]>
		</java-doc>

		<implementation type="string"><![CDATA[
public String toString() {
	ToStringBuilder tsb = new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE);
	tsb.append("${attribute}", ${attribute});
	return tsb.toString();
}
		]]>
		</implementation>

		<implementation type="stringbuffer"><![CDATA[
public String toString() {
	final String dot = ",";

	StringBuffer r = new StringBuffer();

	r.append("${class_name}[");
	r.append(super.toString());
	r.append(dot).append("${attribute}=").append(${attribute});
	r.append("]");

	return r.toString();
}
		]]>
		</implementation>

		<implementation type="stringbuilder"><![CDATA[
public String toString() {
	final String dot = ",";

	StringBuilder r = new StringBuilder();

	r.append("${class_name}[");
	r.append(super.toString());
	r.append(dot).append("${attribute}=").append(${attribute});
	r.append("]");

	return r.toString();
}
		]]>
		</implementation>
	</to-string>

	<externalizable>
		<java-doc><![CDATA[
/**
 * Externalizable
 */
        ]]>
		</java-doc>

		<implementation><![CDATA[
public void writeExternal(ObjectOutput out) throws IOException {
	out.${write_method}(${attribute});
}

public void readExternal(ObjectInput in) throws IOException,
		ClassNotFoundException {
	${attribute} = ${convert_class}in.${read_method}();
}
    	]]>
		</implementation>
	</externalizable>
	
	<enumeration>
		<java-doc><![CDATA[
/**
 * Enumeration
 */
        ]]>
		</java-doc>

		<implementation><![CDATA[
private int value;
private String displayName;

private ${class_name}(int value, String displayName) {
	this.value = value;
	this.displayName = displayName;
}

public int value() {
	return value;
}

public String displayName() {
	return displayName;
}

public static ${class_name}[] valuesInDisplayOrder() {
	return valuesInDisplayOrder(true);
}

public static ${class_name}[] valuesInDisplayOrder(final boolean isAscOrder) {
	${class_name}[] r = ${class_name}.values();
	Arrays.sort(r, new Comparator<${class_name}>() {
		public int compare(${class_name} o1, ${class_name} o2) {
			return isAscOrder ? o1.value - o2.value : o2.value - o1.value;
		}
	});
	return r;
}
    	]]>
		</implementation>
	</enumeration>
</configuration>